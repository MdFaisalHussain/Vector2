class Vector2{static ZERO=new Vector2(0,0);static ONE=new Vector2(1,1);static UP=new Vector2(0,-1);static DOWN=new Vector2(0,1);static LEFT=new Vector2(-1,0);static RIGHT=new Vector2(1,0);static INF=new Vector2(1/0,1/0);static NEG_INF=new Vector2(-1/0,-1/0);constructor(t=0,e=0){this._x=t,this._y=e}get x(){return this._x}set x(t){this._x=t}get y(){return this._y}set y(t){this._y=t}static toRadians(t){return t*(Math.PI/180)}static toDegrees(t){return t*(180/Math.PI)}add(t){return new Vector2(this.x+t.x,this.y+t.y)}subtract(t){return new Vector2(this.x-t.x,this.y-t.y)}multiply(t){return t instanceof Vector2?new Vector2(this.x*t.x,this.y*t.y):new Vector2(this.x*t,this.y*t)}divide(t){return t instanceof Vector2?new Vector2(this.x/t.x,this.y/t.y):new Vector2(this.x/t,this.y/t)}get magnitude(){return Math.sqrt(this.x**2+this.y**2)}get magnitudeSquared(){return this.x**2+this.y**2}normalize(){return this.magnitude>0?this.divide(this.magnitude):Vector2.ZERO}get angle(){return Math.atan2(this.y,this.x)}get angleDegrees(){return Vector2.toDegrees(this.angle)}angleTo(t){return Math.atan2(t.y,t.x)-this.angle}angleToDegrees(t){return Vector2.toDegrees(this.angleTo(t))}rotate(t){let e=Math.cos(t),r=Math.sin(t),i=this.x*e-this.y*r,s=this.x*r+this.y*e;return this._x=i,this._y=s,this}rotated(t){return new Vector2(this.x,this.y).rotate(t)}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}distanceTo(t){return Math.sqrt((t.x-this.x)**2+(t.y-this.y)**2)}lerp(t,e){return this.multiply(1-e).add(t.multiply(e))}slerp(t,e){let r=this.normalize().dot(t.normalize()),i=Math.acos(Math.max(-1,Math.min(1,r)))*e,s=t.subtract(this.multiply(r)).normalize();return this.multiply(Math.cos(i)).add(s.multiply(Math.sin(i)))}project(t){let e=this.dot(t)/t.dot(t);return t.multiply(e)}reflect(t){return this.subtract(t.multiply(2*this.dot(t)))}perpendicular(){return new Vector2(-this.y,this.x)}orthonormal(){return this.perpendicular().normalize()}clampLength(t,e){let r=this.magnitude;return r<t?this.normalize().multiply(t):r>e?this.normalize().multiply(e):this}equals(t){return this.x===t.x&&this.y===t.y}toString(){return`Vector2(${this.x}, ${this.y})`}}
